// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Tags from "./Tags.js";
import * as Curry from "../../../node_modules/bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Helpers from "./Helpers.js";
import * as Belt_Array from "../../../node_modules/bs-platform/lib/es6/belt_Array.js";
import * as Json_decode from "../../../node_modules/@glennsl/bs-json/lib/es6_global/src/Json_decode.bs.js";

function createGemArray(json) {
  return JSON.parse(JSON.stringify(json).replace((/gem tags/gi), "gem_tags"));
}

function decodeGem(json) {
  return {
          name: Json_decode.field("name", Json_decode.string, json),
          gem_tags: Json_decode.field("gem_tags", Json_decode.string, json)
        };
}

function decodeGemTitle(json) {
  return {
          title: Json_decode.field("title", decodeGem, json)
        };
}

function decodeQuery(json) {
  return {
          cargoquery: Json_decode.field("cargoquery", (function (param) {
                  return Json_decode.array(decodeGemTitle, param);
                }), json)
        };
}

function App(Props) {
  var match = React.useState((function () {
          return /* LoadingGems */0;
        }));
  var setState = match[1];
  var state = match[0];
  React.useEffect((function () {
          fetch("https://pathofexile.gamepedia.com/api.php?action=cargoquery&tables=items,skill,skill_gems&fields=items.name,skill_gems.gem_tags,&where=items.frame_type%3D%22gem%22&join_on=items.name%3Dskill_gems._pageName,items.name%3Dskill._pageName&limit=10&format=json&origin=*").then((function (response) {
                      return response.json();
                    })).then((function (json) {
                    var gems = decodeQuery(createGemArray(json));
                    var gemsWithArrayTags = Belt_Array.map(gems.cargoquery, (function (gem) {
                            return {
                                    name: gem.title.name,
                                    gem_tags: gem.title.gem_tags.split(",")
                                  };
                          }));
                    return Promise.resolve(Curry._1(setState, (function (_previousState) {
                                      return /* LoadedGems */[gemsWithArrayTags];
                                    })));
                  })).catch((function (_err) {
                  console.log("error:", _err);
                  return Promise.resolve(Curry._1(setState, (function (_previousState) {
                                    return /* ErrorLoadingGems */1;
                                  })));
                }));
          return ;
        }), ([]));
  if (typeof state === "number") {
    if (state !== 0) {
      return "An error occurred!";
    } else {
      return "Loading...";
    }
  } else {
    var gems = state[0];
    var gemTagList = gems.map((function (gem) {
            return gem.gem_tags.join(",");
          }));
    var tags = gemTagList.join(",").split(",");
    var utags = Helpers.reduceAndSort(tags);
    var filtered = gems.filter((function (gem) {
            return (/(?=.*Fire)|(?=.*Chaos)/gi).test(gem.gem_tags.join("|"));
          }));
    return React.createElement(React.Fragment, undefined, React.createElement(Tags.make, {
                    tags: utags
                  }), Belt_Array.mapWithIndex(filtered, (function (i, gem) {
                      return React.createElement("div", {
                                  key: String(i)
                                }, React.createElement("b", undefined, gem.name), React.createElement("br", undefined), Belt_Array.mapWithIndex(gem.gem_tags, (function (i, tag) {
                                        return React.createElement("div", {
                                                    key: String(i)
                                                  }, tag);
                                      })), React.createElement("br", undefined));
                    })));
  }
}

var make = App;

export {
  createGemArray ,
  decodeGem ,
  decodeGemTitle ,
  decodeQuery ,
  make ,
  
}
/* Tags Not a pure module */
